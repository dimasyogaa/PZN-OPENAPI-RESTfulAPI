/**
* TodoList RESTful API
* OpenAPI for TodoList RESTful API
*
* OpenAPI spec version: 1
* Contact: yogadimaspambudi@gmail.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Get All Todolist
     * Get all active todolist by default
     * @param includeDone Is include_done todolist (optional, default to false)
     * @param name Filter todolist by name (optional)
     */
    @Location("/todolist") class todolistGet(val includeDone: kotlin.Boolean, val name: kotlin.String)

    /**
     * Get All Todolist
     * Get all active todolist by default
     * @param includeDone Is include_done todolist (optional, default to false)
     * @param name Filter todolist by name (optional)
     */
    @Location("/todolist") class todolistGet(val includeDone: kotlin.Boolean, val name: kotlin.String)

    /**
     * Create new Todolist
     * Create new active todolist
     * @param body  
     */
    @Location("/todolist") class todolistPost(val body: CreateOrUpdateTodolist)

    /**
     * Delete existing todolist
     * Delete existing todolist in database
     * @param todolistId TodoList id for updated 
     */
    @Location("/todolist/{todolistId}") class todolistTodolistIdDelete(val todolistId: kotlin.String)

    /**
     * Update existing todolist
     * Update existing todolist in database
     * @param body  
     * @param todolistId TodoList id for updated 
     */
    @Location("/todolist/{todolistId}") class todolistTodolistIdPut(val body: CreateOrUpdateTodolist, val todolistId: kotlin.String)

}
