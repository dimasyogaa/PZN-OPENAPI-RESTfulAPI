/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ArrayTodolist;
import io.swagger.model.CreateOrUpdateTodolist;
import io.swagger.model.InlineResponse200;
import io.swagger.model.Todolist;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-11T18:50:41.137883156Z[GMT]")
@Validated
public interface TodolistApi {

    @Operation(summary = "Get All Todolist", description = "Get all active todolist by default", security = {
        @SecurityRequirement(name = "TodolistAuth")    }, tags={ "All", "Todolist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success get all todolist", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ArrayTodolist.class))) })
    @RequestMapping(value = "/todolist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayTodolist> todolistGet(@Parameter(in = ParameterIn.QUERY, description = "Is include_done todolist" ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "include_done", required = false, defaultValue="false") Boolean includeDone, @Size(min=1,max=100) @Parameter(in = ParameterIn.QUERY, description = "Filter todolist by name" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name);


    @Operation(summary = "Create new Todolist", description = "Create new active todolist", security = {
        @SecurityRequirement(name = "TodolistAuth")    }, tags={ "Todolist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success create todolist", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Todolist.class))) })
    @RequestMapping(value = "/todolist",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Todolist> todolistPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateOrUpdateTodolist body);


    @Operation(summary = "Delete existing todolist", description = "Delete existing todolist in database", security = {
        @SecurityRequirement(name = "TodolistAuth")    }, tags={ "Todolist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success delete todolist", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "404", description = "Failed delete not found todolist", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))) })
    @RequestMapping(value = "/todolist/{todolistId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<InlineResponse200> todolistTodolistIdDelete(@Size(min=1,max=100) @Parameter(in = ParameterIn.PATH, description = "TodoList id for updated", required=true, schema=@Schema()) @PathVariable("todolistId") String todolistId);


    @Operation(summary = "Update existing todolist", description = "Update existing todolist in database", security = {
        @SecurityRequirement(name = "TodolistAuth")    }, tags={ "Todolist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success update todolist", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Todolist.class))) })
    @RequestMapping(value = "/todolist/{todolistId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Todolist> todolistTodolistIdPut(@Size(min=1,max=100) @Parameter(in = ParameterIn.PATH, description = "TodoList id for updated", required=true, schema=@Schema()) @PathVariable("todolistId") String todolistId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateOrUpdateTodolist body);

}

