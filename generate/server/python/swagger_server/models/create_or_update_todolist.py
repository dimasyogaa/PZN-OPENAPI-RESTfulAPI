# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreateOrUpdateTodolist(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, priority: float=None, tags: List[str]=None):  # noqa: E501
        """CreateOrUpdateTodolist - a model defined in Swagger

        :param name: The name of this CreateOrUpdateTodolist.  # noqa: E501
        :type name: str
        :param priority: The priority of this CreateOrUpdateTodolist.  # noqa: E501
        :type priority: float
        :param tags: The tags of this CreateOrUpdateTodolist.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'name': str,
            'priority': float,
            'tags': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'priority': 'priority',
            'tags': 'tags'
        }
        self._name = name
        self._priority = priority
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'CreateOrUpdateTodolist':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateOrUpdateTodolist of this CreateOrUpdateTodolist.  # noqa: E501
        :rtype: CreateOrUpdateTodolist
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CreateOrUpdateTodolist.


        :return: The name of this CreateOrUpdateTodolist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateOrUpdateTodolist.


        :param name: The name of this CreateOrUpdateTodolist.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def priority(self) -> float:
        """Gets the priority of this CreateOrUpdateTodolist.


        :return: The priority of this CreateOrUpdateTodolist.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority: float):
        """Sets the priority of this CreateOrUpdateTodolist.


        :param priority: The priority of this CreateOrUpdateTodolist.
        :type priority: float
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this CreateOrUpdateTodolist.


        :return: The tags of this CreateOrUpdateTodolist.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this CreateOrUpdateTodolist.


        :param tags: The tags of this CreateOrUpdateTodolist.
        :type tags: List[str]
        """

        self._tags = tags
